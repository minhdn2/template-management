{"version":3,"sources":["Template.js","App.js","serviceWorker.js","index.js"],"names":["Template","templateList","this","props","templates","map","template","react_default","a","createElement","className","key","id","src","imgSrc","alt","title","shortDescription","href","previewLink","Component","App","state","src_Template","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMA2BeA,mLAxBF,IAECC,EADgBC,KAAKC,MAAnBC,UACuBC,IAAI,SAAAC,GAC/B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,IAAKL,EAASM,IACpCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeG,IAAKP,EAASQ,OAAQC,IAAI,mBACxDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcJ,EAASU,OACrCT,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaJ,EAASW,kBACnCV,EAAAC,EAAAC,cAAA,KAAGS,KAAMZ,EAASa,YAAaT,UAAU,mBAAzC,gBAMpB,OACIH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVT,UAnBMmB,aCwBRC,6MAtBbC,MAAQ,CACNlB,UAAW,CACT,CAAEQ,GAAI,EAAGE,OAAQ,8BAA+BE,MAAO,UAAWC,iBAAkB,gNAAiNE,YAAa,wCAClT,CAAEP,GAAI,EAAGE,OAAQ,6BAA8BE,MAAO,SAAUC,iBAAkB,0KAA2KE,YAAa,+BAC1Q,CAAEP,GAAI,EAAGE,OAAQ,gCAAiCE,MAAO,YAAaC,iBAAkB,gMAAiME,YAAa,4CACtS,CAAEP,GAAI,EAAGE,OAAQ,iCAAkCE,MAAO,aAAcC,iBAAkB,8JAA+JE,YAAa,6GAIxQ,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,wBAIAF,EAAAC,EAAAC,cAACc,EAAD,CAAUnB,UAAWF,KAAKoB,MAAMlB,oBAjBtBgB,aCSEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fc0cdfff.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Template extends Component {\r\n    render() {\r\n        const { templates } = this.props;\r\n        const templateList = templates.map(template => {\r\n            return (\r\n                <div className=\"col-md-4\" key={template.id}>\r\n                    <div className=\"card\">\r\n                        <img className=\"card-img-top\" src={template.imgSrc} alt=\"Card cover cap\"></img>\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">{template.title}</h5>\r\n                            <p className=\"card-text\">{template.shortDescription}</p>\r\n                            <a href={template.previewLink} className=\"btn btn-primary\">Preview</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n        return (\r\n            <div className=\"row\">\r\n                {templateList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Template","import React, { Component } from 'react';\nimport Template from './Template';\n\nclass App extends Component {\n  state = {\n    templates: [\n      { id: 1, imgSrc: 'templates/landerz/cover.png', title: 'Landerz', shortDescription: 'Landerz is your go-to solution when in search of the best free business landing page website template. Rock the online world with a contemporary, clean and light web design that will spark their curiosity.', previewLink: 'templates/landerz/landerz/index.html' },\n      { id: 2, imgSrc: 'templates/confer/cover.png', title: 'Confer', shortDescription: 'With a free HTML conference website template like Confer, you can market your event or any upcoming gathering like a champ. Kick it off in style and make a difference.', previewLink: 'templates/confer/index.html' },\n      { id: 3, imgSrc: 'templates/traveland/cover.png', title: 'Traveland', shortDescription: 'Indeed, Traveland is a free travel booking website template for travel agencies and other tourism businesses. Hammer out the best and most impressive travel page that will stand out a mile.', previewLink: 'templates/traveland/traveland/index.html' },\n      { id: 4, imgSrc: 'templates/quitelight/cover.png', title: 'Quitelight', shortDescription: 'Creativity knows no boundaries and nor does Quitelight free creative magazine website template. Get things going now and shine online with your fresh page.', previewLink: 'templates/quitelight/index.html' }\n    ]\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Templates Management!</h1>\n        <p>\n          Welcome ^.^\n        </p>\n\n        <Template templates={this.state.templates} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}